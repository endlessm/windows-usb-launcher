//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EndlessLauncher.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Literals {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Literals() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EndlessLauncher.Resources.Literals", typeof(Literals).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Customer Support.
        /// </summary>
        public static string button_customer_support {
            get {
                return ResourceManager.GetString("button_customer_support", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Let&apos;s go!.
        /// </summary>
        public static string button_lets_go {
            get {
                return ResourceManager.GetString("button_lets_go", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ?.
        /// </summary>
        public static string button_question_mark {
            get {
                return ResourceManager.GetString("button_question_mark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Code:.
        /// </summary>
        public static string error_code_message {
            get {
                return ResourceManager.GetString("error_code_message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please contact us with any other questions..
        /// </summary>
        public static string incompatibility_msg {
            get {
                return ResourceManager.GetString("incompatibility_msg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This USB stick is not compatible with your computer..
        /// </summary>
        public static string incompatibility_title {
            get {
                return ResourceManager.GetString("incompatibility_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to debug log file.
        /// </summary>
        public static string log_file_title {
            get {
                return ResourceManager.GetString("log_file_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click below to restart your computer into the HACK experience.
        /// </summary>
        public static string welcome_click_to_restart_msg {
            get {
                return ResourceManager.GetString("welcome_click_to_restart_msg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Welcome to.
        /// </summary>
        public static string welcome_partial_title {
            get {
                return ResourceManager.GetString("welcome_partial_title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Most devices have USB 2.0 and USB 3.0 ports. HACK can only be run through a USB 3.0 port..
        /// </summary>
        public static string wrong_port_info_msg1 {
            get {
                return ResourceManager.GetString("wrong_port_info_msg1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USB 3.0 ports are sometimes blue to distinguish them from USB 2.0 ports..
        /// </summary>
        public static string wrong_port_info_msg2 {
            get {
                return ResourceManager.GetString("wrong_port_info_msg2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This USB stick is in the wrong port. Try a different port..
        /// </summary>
        public static string wrong_port_msg {
            get {
                return ResourceManager.GetString("wrong_port_msg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You&apos;re almost ready to.
        /// </summary>
        public static string wrong_port_partial_title {
            get {
                return ResourceManager.GetString("wrong_port_partial_title", resourceCulture);
            }
        }
    }
}
